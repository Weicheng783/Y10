{"remainingRequest":"/home/csimage/group_repo/cultime_frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/csimage/group_repo/cultime_frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/csimage/group_repo/cultime_frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/csimage/group_repo/cultime_frontend/src/views/Register.vue?vue&type=template&id=63ae9146&","dependencies":[{"path":"/home/csimage/group_repo/cultime_frontend/src/views/Register.vue","mtime":1614715700816},{"path":"/home/csimage/group_repo/cultime_frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/csimage/group_repo/cultime_frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/csimage/group_repo/cultime_frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/csimage/group_repo/cultime_frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}